version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: investment_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Initialize database with our schema
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/01_create_tables.sql
      - ./sql/create_partitions.sql:/docker-entrypoint-initdb.d/02_create_partitions.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - investment_network

  # Use standard Airflow for stability
  airflow:
    image: apache/airflow:2.7.0
    container_name: investment_airflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
      # Pass API keys to Airflow
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      # Mount entire project for dbt and src access
      - .:/opt/airflow/include
    networks:
      - investment_network
    command: >
      bash -c "airflow db init &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
               airflow webserver & airflow scheduler"

  streamlit:
    build:
      context: .
      dockerfile: ./dashboard/Dockerfile
    container_name: investment_streamlit
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Secure environment variable passing
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: postgres
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: 5432
    networks:
      - investment_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Add Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: investment_redis
    ports:
      - "6379:6379"
    networks:
      - investment_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  investment_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
